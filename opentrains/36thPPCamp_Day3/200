#include <bits/stdc++.h>

using namespace std;

#define INF 0x3f3f3f3f
#define N 4010
struct node {
	int x, y, c;
	node() {
		x = y = 0;
		c = 2;
	}
	node (int x, int y, int c) : x(x), y(y), c(c) {}
}pre[N][N];
int n, m;
char s[N], t[N], str[N];
int dp[N][N];
int f[N][2], g[N][2];
int nx[2], ny[2];

int main() {
	while (~scanf("%s %s", s + 1, t + 1)) {
		n = strlen(s + 1);
		m = strlen(t + 1);
		memset(dp, 0x3f, sizeof dp);
		for (int i = 0; i <= n + 1; ++i) {
			for (int j = 0; j <= m + 1; ++j) {
				pre[i][j] = node();
			}
		}
		nx[0] = nx[1] = n + 1;
		for (int i = n; i >= 1; --i) {
			f[i][0] = nx[0];
			f[i][1] = nx[1];
			nx[s[i] - '0'] = i;
		}
		ny[0] = ny[1] = m + 1;
		for (int i = m; i >= 1; --i) {
			g[i][0] = ny[0];
			g[i][1] = ny[1];
			ny[t[i] - '0'] = i;
		}
		f[0][0] = nx[0];
		f[0][1] = nx[1];
		g[0][0] = ny[0];
		g[0][1] = ny[1];
		f[n + 1][0] = n + 1;
		f[n + 1][1] = n + 1;
		g[m + 1][0] = m + 1;
		g[m + 1][1] = m + 1;
		for (int i = 1; i <= n; ++i) {
			if (s[i] == '0') {
				dp[i][m + 1] = 1;
				for (int j = 1; j <= m; ++j) {
					if (t[j] == '0') {
						dp[i][j] = 1;
						break;
					}
				}
				break;
			}
		}
		for (int i = 1; i <= n; ++i) {
			if (s[i] == '1') {
				dp[i][m + 1] = 1;
				for (int j = 1; j <= m; ++j) {
					if (t[j] == '1') {
						dp[i][j] = 1;
						break;
					}
				}
				break;
			}
		}
		int x, y, c;
		for (int i = 1; i <= n + 1; ++i) {
			for (int j = 1; j <= m + 1; ++j) if (dp[i][j] != INF) {
				if (i == n + 1 && j == m + 1) continue;
				if (i != n + 1) c = s[i] - '0'; 
				else c = t[j] - '0';
				x = f[i][0], y = g[j][0]; 
				if (dp[x][y] > dp[i][j] + 1) { 
					dp[x][y] = dp[i][j] + 1;
					pre[x][y] = node(i, j, c); 
				} else if (dp[x][y] == dp[i][j] + 1 && pre[x][y].c > c) {
					pre[x][y] = node(i, j, c);
				}
				x = f[i][1], y = g[j][1];
				if (dp[x][y] > dp[i][j] + 1) {
					dp[x][y] = dp[i][j] + 1;
					pre[x][y] = node(i, j, c);
				} else if (dp[x][y] == dp[i][j] + 1 && pre[x][y].c > c) {
					pre[x][y] = node(i, j, c);
				}
			}
		}
		node it = pre[n + 1][m + 1];
		int cnt = 0;
		while (it.x != 0 && it.y != 0) {
			str[++cnt] = it.c + '0';
			it = pre[it.x][it.y];
		}
		reverse(str + 1, str + 1 + cnt);
		str[cnt + 1] = 0;
		printf("%s\n", str + 1);
	}
	return 0;
}
